{"version":3,"sources":["utils/api.js","State.js","utils/config.js","utils/mapGeocode.js","components/Search.js","consts/colors.js","components/Header.js","components/If.js","components/Map.js","components/SearchContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["url","cep","getCep","a","async","fetchJsonp","jsonpCallback","jsonpCallbackFunction","response","json","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","API_KEY","getAddress","addressString","callback","Geocode","fromAddress","then","results","geometry","location","lat","lng","error","console","setApiKey","setLanguage","setRegion","setAddress","address","dispatch","type","Form","Styled","form","Title","h3","SearchInput","InputMask","Button","button","Search","useState","searchValue","setSearchValue","onSubmit","e","preventDefault","getLocation","logradouro","bairro","localidade","uf","invalid","placeholder","onChange","target","mask","HeaderContainer","styledComponentsCjs","header","h2","Header","If","condition","defaultPosition","MapContainer","div","Marker","AddressMap","bootstrapURLKeys","key","defaultCenter","zoom","center","CloseButton","DivContainer","Text","p","Container","isLoading","erro","onClick","state","action","AppBody","App","props","className","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.506d3a7e.chunk.js","sourcesContent":["import fetchJsonp from 'fetch-jsonp';\r\n\r\nconst url = (cep) => `https://viacep.com.br/ws/${cep}/json/`\r\n\r\nexport const getCep = async (cep) => {\r\n  const response = await fetchJsonp(url(cep), {\r\n    jsonpCallback: 'callback',\r\n    jsonpCallbackFunction: 'myfunc'\r\n  });\r\n  return await response.json();\r\n} ","import React, {createContext, useContext, useReducer} from 'react';\r\nexport const StateContext = createContext();\r\nexport const StateProvider = ({reducer, initialState, children}) =>(\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\nexport const useStateValue = () => useContext(StateContext);\r\n\r\nexport const SET_LOADING = 'SET_LOADING';\r\nexport const SET_ADDRESS = 'SET_ADDRESS';\r\nexport const SET_LOCATION = 'SET_LOCATION';","export const API_KEY = 'AIzaSyBg4JEJgzcIKl_xJufoc-VuZVRaox2up9E';","import Geocode from \"react-geocode\";\r\nimport { API_KEY } from './config'\r\n\r\nGeocode.setApiKey(API_KEY);\r\nGeocode.setLanguage(\"pt-br\");\r\nGeocode.setRegion(\"br\");\r\n\r\nexport default function getAddress(addressString, callback) {\r\n  return Geocode.fromAddress(addressString).then(\r\n    response => {\r\n      const { lat, lng } = response.results[0].geometry.location;\r\n      return callback({ lat, lng })\r\n    },\r\n    error => {\r\n      console.error(error);\r\n    }\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport Styled from 'styled-components'\r\nimport InputMask from 'react-input-mask';\r\nimport { text, btn, white } from '../consts/colors';\r\nimport { getCep } from '../utils/api';\r\nimport { useStateValue, SET_ADDRESS, SET_LOADING, SET_LOCATION } from '../State';\r\nimport getLocation from '../utils/mapGeocode'; \r\n\r\nconst setAddress = (address, dispatch) =>\r\n  dispatch({ type: SET_ADDRESS, address });\r\n\r\nconst Search = () => {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const dispatch = useStateValue()[1]; \r\n\r\n  const onSubmit = async e => {\r\n    e.preventDefault();\r\n    dispatch({ type: SET_LOADING });\r\n    try {\r\n      const address = await getCep(searchValue);\r\n      const addressString = `${address.logradouro} - ${address.bairro}, ${address.localidade} - ${address.uf}`;\r\n      getLocation(addressString,\r\n        (value) => dispatch({ type: SET_LOCATION, value })\r\n      );\r\n      return setAddress(address, dispatch);\r\n    } catch {\r\n      setAddress({ invalid: true }, dispatch);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={onSubmit}>\r\n      <Title>CEP</Title>\r\n      <SearchInput placeholder='Digite apenas nÃºmeros'\r\n        value={searchValue} onChange={(e) => setSearchValue(e.target.value)} mask=\"99999-999\"\r\n      />\r\n      <Button>Buscar</Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst Form = Styled.form`\r\n  display: flex;\r\n  position: relative;  \r\n`;\r\n\r\nconst Title = Styled.h3`\r\n  color: ${text};\r\n  margin: 0;\r\n  font-weight: normal;\r\n  margin-right: 15px;\r\n`;\r\n\r\nconst SearchInput = Styled(InputMask)`\r\n  color: ${text};\r\n  height: 25px;\r\n  margin: 0 6px;\r\n  padding: 0 5px;\r\n`;\r\n\r\nconst Button = Styled.button`\r\n  color: ${white};\r\n  background: ${btn};\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 5px 12px;\r\n`;\r\n\r\nexport default Search;","export const text = '#777777';\r\nexport const background = '#eeeeee';\r\nexport const btn = '#51a8e1';\r\nexport const white = '#ffffff'","import React from 'react';\r\nimport Search from './Search';\r\nimport styledComponentsCjs from 'styled-components';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <HeaderContainer>\r\n      <Title>Consultar</Title>\r\n      <Search />\r\n    </HeaderContainer>\r\n  )\r\n};\r\n\r\nconst HeaderContainer = styledComponentsCjs.header`\r\n  background-color: #eee;\r\n  padding: 30px 20px;\r\n`\r\n\r\nconst Title = styledComponentsCjs.h2`\r\n  margin: 0 0 20px;\r\n  font-size: 1.2em;\r\n  color: #4a4a4a;\r\n`\r\n\r\nexport default Header;","export const If = ({ condition, children }) => condition ? children : false;","import React from 'react';\r\nimport styledComponentsCjs from 'styled-components';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { API_KEY } from '../utils/config'; \r\nimport { useStateValue } from '../State';\r\nimport { If } from './If';\r\n\r\nconst defaultPosition = {lat: 51.505, lng: -0.09};\r\n\r\nconst AddressMap = () => {\r\n  const [{ location }] = useStateValue();\r\n  return (\r\n    <MapContainer>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: API_KEY }}\r\n        defaultCenter={defaultPosition} zoom={18}\r\n        center={location}\r\n      >\r\n        <If condition={location}>\r\n          <Marker lat={location && location.lat} lng={location && location.lng} />\r\n        </If>\r\n      </GoogleMapReact>\r\n    </MapContainer>\r\n  );\r\n};\r\n    \r\nconst MapContainer = styledComponentsCjs.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 400px;\r\n`\r\n\r\nconst Marker = styledComponentsCjs.div`\r\n  background-image: url('marker.png');\r\n  background-size: cover;\r\n  width: 32px;\r\n  height: 32px;\r\n`\r\n    \r\nexport default AddressMap;","import React from 'react';\r\nimport { useStateValue, SET_ADDRESS } from '../State';\r\nimport AddressMap from './Map';\r\nimport styledComponentsCjs from 'styled-components';\r\n\r\nconst Container = () => {\r\n  const [{ address, isLoading }, dispatch] = useStateValue();\r\n\r\n  const closeMap = () => dispatch({type: SET_ADDRESS, address: null})\r\n\r\n  if (isLoading) return <p>Carregando</p>;\r\n  if (!address) return false;\r\n  if (address.invalid) return <p>Digite um CEP vÃ¡lido</p>;\r\n  if (address.erro) return <p>Nenhum resultado</p>;\r\n\r\n  return (\r\n    <DivContainer>\r\n      <CloseButton onClick={closeMap}>Fechar</CloseButton>\r\n      <Title>{address.logradouro}</Title>\r\n      <Text>{address.bairro}</Text>\r\n      <Text>{address.localidade} - {address.uf}</Text>\r\n      <Text>{address.cep}</Text>\r\n      <MapContainer>\r\n        <AddressMap />\r\n      </MapContainer>\r\n    </DivContainer>\r\n  )\r\n};\r\n\r\nconst CloseButton = styledComponentsCjs.button`\r\n  background: none;\r\n  background-image: url(close.png);\r\n  height: 20px;\r\n  width: 20px;\r\n  background-size: cover;\r\n  font-size: 0;\r\n  border: none;\r\n  position: absolute;\r\n  right: 20px;\r\n  top: 20px;\r\n  outline: none;\r\n  cursor: pointer;\r\n`\r\n\r\nconst DivContainer = styledComponentsCjs.div`\r\n  padding: 20px;\r\n  border: 2px solid #eee;\r\n  margin-top: 5px;\r\n  position: relative;\r\n`\r\n\r\nconst Text = styledComponentsCjs.p`\r\n  font-size: .8em;\r\n  margin: 2px 0;\r\n`\r\n\r\nconst Title = styledComponentsCjs.h3`\r\n  margin: 0 0 5px;\r\n  font-weight: 600;\r\n  font-size: 1.2em;\r\n`\r\n\r\nconst MapContainer = styledComponentsCjs.div`\r\n  margin-top: 15px;\r\n`;\r\n\r\nexport default Container;","import React from 'react';\nimport Header from './Header';\nimport Container from './SearchContainer';\nimport { StateProvider, SET_ADDRESS, SET_LOADING, SET_LOCATION } from '../State';\nimport styledComponentsCjs from 'styled-components';\n\nconst initialState = {address: null, isLoading: false, location: null};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_ADDRESS:\n      return { ...state, address: action.address, isLoading: false};\n    case SET_LOADING:\n      return {...state, isLoading: true};\n    case SET_LOCATION:\n      return { ...state, location: action.value };\n    default:\n      return state\n  }\n}\n\nfunction App(props) {\n  return (\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <AppBody className=\"App\">\n        <Header />\n        <Container />\n      </AppBody>\n    </StateProvider>\n  );\n}\n\nconst AppBody = styledComponentsCjs.div`\n  max-width: 700px;\n  width: 80%;\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}